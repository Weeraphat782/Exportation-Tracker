import { EmailBookingData } from './email-templates';
import { Quotation } from './db';

export async function generateEmailBookingPDF(
  emailData: EmailBookingData,
  quotation: Quotation,
  emailContent: string
): Promise<void> {
  try {
    // Dynamic import to avoid SSR issues
    const jsPDF = (await import('jspdf')).default;
    
    const doc = new jsPDF();
    
    // Set font
    doc.setFont('helvetica');
    
    // Header
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Email Booking Request', 20, 20);
    
    // Quotation Info
    doc.setFontSize(12);
    doc.text(`Quotation ID: ${quotation.id}`, 20, 35);
    doc.text(`Generated: ${new Date().toLocaleDateString('en-US')}`, 20, 45);
    
    // Line separator
    doc.setDrawColor(200, 200, 200);
    doc.line(20, 55, 190, 55);
    
    // Email content
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);
    
    // Split email content into lines
    const lines = emailContent.split('\n');
    let yPosition = 70;
    const lineHeight = 5;
    const pageHeight = 280; // Leave margin at bottom
    
    lines.forEach((line, index) => {
      // Check if we need a new page
      if (yPosition > pageHeight) {
        doc.addPage();
        yPosition = 20;
      }
      
      // Handle long lines by splitting them
      const maxWidth = 170;
      const wrappedLines = doc.splitTextToSize(line, maxWidth);
      
      wrappedLines.forEach((wrappedLine: string) => {
        if (yPosition > pageHeight) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(wrappedLine, 20, yPosition);
        yPosition += lineHeight;
      });
    });
    
    // Footer
    const totalPages = doc.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(
        `Page ${i} of ${totalPages} - Generated by Exportation Tracker`,
        20,
        290
      );
    }
    
    // Generate filename
    const filename = `Email_Booking_${quotation.id}_${new Date().toISOString().split('T')[0]}.pdf`;
    
    // Download the PDF
    doc.save(filename);
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF');
  }
}

export function generateEmailBookingHTML(
  emailData: EmailBookingData,
  quotation: Quotation,
  emailContent: string
): string {
  return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Email Booking Request - ${quotation.id}</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
          color: #333;
        }
        .header {
          border-bottom: 2px solid #ddd;
          padding-bottom: 20px;
          margin-bottom: 20px;
        }
        .header h1 {
          color: #2c3e50;
          margin: 0;
        }
        .meta-info {
          background: #f8f9fa;
          padding: 15px;
          border-radius: 5px;
          margin-bottom: 20px;
        }
        .meta-info div {
          margin-bottom: 5px;
        }
        .email-content {
          background: white;
          border: 1px solid #ddd;
          border-radius: 5px;
          padding: 20px;
          white-space: pre-line;
          font-family: 'Courier New', monospace;
          font-size: 14px;
        }
        .footer {
          margin-top: 30px;
          padding-top: 20px;
          border-top: 1px solid #ddd;
          font-size: 12px;
          color: #666;
          text-align: center;
        }
        @media print {
          body { margin: 0; }
          .no-print { display: none; }
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Email Booking Request</h1>
      </div>
      
      <div class="meta-info">
        <div><strong>Quotation ID:</strong> ${quotation.id}</div>
        <div><strong>Company:</strong> ${quotation.company_name || 'N/A'}</div>
        <div><strong>Destination:</strong> ${quotation.destination || 'N/A'}</div>
        <div><strong>Total Cost:</strong> ${new Intl.NumberFormat('th-TH', {
          style: 'currency',
          currency: 'THB'
        }).format(quotation.total_cost)}</div>
        <div><strong>Generated:</strong> ${new Date().toLocaleString('en-US')}</div>
      </div>
      
      <div class="email-content">${emailContent}</div>
      
      <div class="footer">
        Generated by Exportation Tracker System
      </div>
    </body>
    </html>
  `;
}
