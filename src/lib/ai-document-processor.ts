import OpenAI from 'openai';
import { writeFileSync, unlinkSync } from 'fs';
import { join } from 'path';
import { tmpdir } from 'os';

// Initialize the OpenAI client with OpenTyphoon API
const openai = new OpenAI({
  apiKey: process.env.TYPHOON_API_KEY || process.env.NEXT_PUBLIC_TYPHOON_API_KEY || 'sk-WJEte8ZIPyEZTqTY0wGuj5vgkT9SAByiP8jUEBTfBEtjtim8',
  baseURL: 'https://api.opentyphoon.ai/v1',
});

interface DocumentAnalysisResult {
  description: string;
  extractedText?: string;
  documentType?: string;
  keyPoints?: string[];
}

export async function analyzeDocument(
  fileUrl: string,
  fileName: string,
  documentType: string
): Promise<DocumentAnalysisResult> {
  try {
    let extractedText = '';
    
    console.log(`üöÄ Analyzing document: ${fileName} from URL: ${fileUrl}`);
    console.log(`üìã Document type: ${documentType}`);
    
    // Check if the file is an image that needs OCR
    const isImage = /\.(jpg|jpeg|png|gif|bmp|webp)$/i.test(fileName);
    const isPDF = fileName.toLowerCase().endsWith('.pdf');
    
    console.log(`üîç File type detection: isImage=${isImage}, isPDF=${isPDF}`);
    
    if (isImage) {
      // For images, use OCR to extract text
      console.log('üì∏ Processing as image file...');
      extractedText = await extractTextFromImage(fileUrl, fileName);
    } else if (isPDF) {
      // For PDFs, extract text content
      console.log('üìÑ Processing as PDF file...');
      extractedText = await extractTextFromPDF(fileUrl, fileName);
    } else {
      // For other document types, try to read as text
      console.log('üìù Processing as text document...');
      extractedText = await extractTextFromDocument(fileUrl, fileName);
    }

    console.log(`üìä Extracted text summary:`);
    console.log(`   - Length: ${extractedText.length} characters`);
    console.log(`   - Type: ${typeof extractedText}`);
    console.log(`   - First 200 chars: ${extractedText.substring(0, 200)}`);

    // Check if we got meaningful content or an error message
    const isErrorMessage = extractedText.includes('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ') || 
                          extractedText.includes('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î') ||
                          extractedText.includes('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤') ||
                          extractedText.includes('‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢');

    let description: string;
    
    if (isErrorMessage) {
      // If we got an error message, use it directly as the description
      console.log('‚ö†Ô∏è Error detected in text extraction, using error message as description');
      description = extractedText;
    } else if (extractedText && extractedText.trim().length > 20) {
      // We have meaningful extracted text, generate AI description
      console.log('‚úÖ Meaningful text found, generating AI description...');
      description = await generateDocumentDescription(extractedText, documentType, fileName);
    } else {
      // No meaningful text found, use filename-based analysis as fallback
      console.log('‚ö†Ô∏è No meaningful text extracted, falling back to filename analysis');
      description = analyzePDFFromFilename(fileName);
    }
    
    console.log(`üéØ Final description: ${description}`);
    
    return {
      description,
      extractedText: extractedText.substring(0, 5000), // Store first 5000 chars for debugging
      documentType,
      keyPoints: isErrorMessage ? [] : extractKeyPoints(extractedText)
    };
  } catch (error: unknown) {
    console.error('‚ùå Error analyzing document:', error);
    
    // Provide detailed error description
    let errorDescription: string;
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    
    if (errorMessage.includes('network') || errorMessage.includes('fetch')) {
      errorDescription = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ${fileName} ‡πÑ‡∏î‡πâ - ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢`;
    } else if (errorMessage.includes('timeout')) {
      errorDescription = `‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ${fileName} ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ - ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô`;
    } else if (errorMessage.includes('memory')) {
      errorDescription = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ${fileName} ‡πÑ‡∏î‡πâ - ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠`;
    } else if (errorMessage.includes('permission')) {
      errorDescription = `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå ${fileName} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`;
    } else {
      errorDescription = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${fileName} ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ - ${errorMessage}`;
    }
    
    return {
      description: errorDescription,
      extractedText: `Error: ${errorMessage}`,
      documentType,
      keyPoints: []
    };
  }
}

async function generateDocumentDescription(
  extractedText: string,
  documentType: string,
  fileName: string
): Promise<string> {
  try {
    // Enhanced prompt focused on extracting key content
    const documentTypeContext = getDocumentTypeContext(documentType);
    
    const response = await openai.chat.completions.create({
      model: 'typhoon-v2.1-12b-instruct',
      messages: [
        {
          role: 'system',
          content: `You are an expert document content analyzer for export/import business. Your task is to extract and summarize the KEY CONTENT and IMPORTANT DETAILS from documents, not describe what type of document it is.

Focus on extracting these specific details when available:
- Company names and parties involved
- Product/goods names and quantities
- Dates (issue date, expiry date, shipment date)
- Destinations/origins
- Permit numbers, reference numbers
- Important conditions, restrictions, or requirements
- Values, amounts, weights
- Key regulatory compliance information

Create a concise Thai summary (2-3 sentences) of the ACTUAL CONTENT and IMPORTANT INFORMATION found in the document.

DO NOT just describe what type of document it is. Extract the actual meaningful content.`
        },
        {
          role: 'user',
          content: `‡∏™‡∏Å‡∏±‡∏î‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ:
‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${fileName}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${documentType}
‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${documentTypeContext}
‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö: ${extractedText.substring(0, 4000)}

‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏ï‡πà‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£

‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ" ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏°‡∏ï‡∏¥`
        }
      ],
      max_tokens: 300,
      temperature: 0.2
    });

    return response.choices[0].message.content || `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${fileName} ‡πÑ‡∏î‡πâ`;
  } catch (error) {
    console.error('Error generating description:', error);
    return `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${fileName} ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`;
  }
}

function getDocumentTypeContext(documentType: string): string {
  const contexts: Record<string, string> = {
    'tk-32': '‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏°‡∏µ‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ï‡∏≤‡∏°‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢',
    'tk-11': '‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°',
    'tk-10': '‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï',
    'invoice': '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    'packing-list': '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏£‡∏∞‡∏ö‡∏∏‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î',
    'certificate': '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    'permit': '‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å',
    'customs': '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏î‡∏ô',
    'company-registration': '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®',
    'msds': '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÄ‡∏Ñ‡∏°‡∏µ'
  };
  
  return contexts[documentType] || '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
}

async function extractTextFromImage(imageUrl: string, fileName: string): Promise<string> {
  try {
    console.log('üñºÔ∏è Processing image with OCR:', fileName);
    console.log('üîó Image URL:', imageUrl);
    
    // Download the image with timeout
    console.log('üì• Downloading image...');
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
    
    const response = await fetch(imageUrl, { 
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      console.error(`‚ùå Failed to fetch image: ${response.status} ${response.statusText}`);
      return `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} ‡πÑ‡∏î‡πâ (HTTP ${response.status})`;
    }
    
    console.log('‚úÖ Image downloaded successfully');
    console.log('üìè Content length:', response.headers.get('content-length'));
    console.log('üìù Content type:', response.headers.get('content-type'));
    
    // Convert to buffer for OCR processing
    const imageBuffer = await response.arrayBuffer();
    console.log(`üíæ Image buffer size: ${imageBuffer.byteLength} bytes`);
    
    if (imageBuffer.byteLength === 0) {
      return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢)`;
    }
    
    if (imageBuffer.byteLength > 10 * 1024 * 1024) { // 10MB limit
      return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (${Math.round(imageBuffer.byteLength / 1024 / 1024)}MB) ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ`;
    }
    
    // Use Tesseract.js for OCR (client-side compatible)
    console.log('ü§ñ Starting OCR processing...');
    const Tesseract = await import('tesseract.js');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const worker: any = await Tesseract.createWorker();
    
    try {
      console.log('üìö Loading OCR languages (Thai + English)...');
      await worker.loadLanguage('eng+tha');
      await worker.initialize('eng+tha');
      
      console.log('üîç Recognizing text...');
      const { data: { text, confidence } } = await worker.recognize(Buffer.from(imageBuffer));
      await worker.terminate();
      
      console.log(`‚úÖ OCR completed with confidence: ${confidence}%`);
      console.log(`üìÑ Extracted ${text.length} characters from ${fileName}`);
      console.log(`üî§ First 200 chars: ${text.substring(0, 200)}`);
      
      if (!text || text.trim().length < 5) {
        return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥)`;
      }
      
      if (confidence < 30) {
        return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡πà‡∏≥ (${confidence}%) ‡∏≠‡∏≤‡∏à‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${text.substring(0, 200)}...`;
      }
      
      return text.trim();
      
    } catch (ocrError: unknown) {
      console.error('‚ùå OCR processing failed:', ocrError);
      await worker.terminate();
      
      const ocrErrorMessage = ocrError instanceof Error ? ocrError.message : 'Unknown OCR error';
      
      // Provide more specific error messages
      if (ocrErrorMessage.includes('timeout')) {
        return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)`;
      } else if (ocrErrorMessage.includes('memory')) {
        return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR`;
      } else {
        return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR: ${ocrErrorMessage}`;
      }
    }
  } catch (error: unknown) {
    console.error('‚ùå Error processing image:', error);
    
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    const errorName = error instanceof Error ? error.name : 'Unknown';
    
    // Provide specific error messages based on error type
    if (errorName === 'AbortError') {
      return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)`;
    } else if (errorMessage.includes('fetch')) {
      return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Supabase Storage ‡πÑ‡∏î‡πâ`;
    } else if (errorMessage.includes('network')) {
      return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢`;
    } else {
      return `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${fileName} - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${errorMessage}`;
    }
  }
}

async function extractTextFromPDF(pdfUrl: string, fileName: string): Promise<string> {
  try {
    console.log('üìÑ Processing PDF:', fileName);
    console.log('üîó PDF URL:', pdfUrl);
    
    // Download PDF file with timeout
    console.log('üì• Downloading PDF...');
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 second timeout for PDFs
    
    const response = await fetch(pdfUrl, {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      console.error(`‚ùå Failed to fetch PDF: ${response.status} ${response.statusText}`);
      return `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ${fileName} ‡πÑ‡∏î‡πâ (HTTP ${response.status})`;
    }
    
    console.log('‚úÖ PDF downloaded successfully');
    console.log('üìè Content length:', response.headers.get('content-length'));
    console.log('üìù Content type:', response.headers.get('content-type'));
    
    const pdfBuffer = await response.arrayBuffer();
    console.log(`üíæ PDF buffer size: ${pdfBuffer.byteLength} bytes`);
    
    if (pdfBuffer.byteLength === 0) {
      return `PDF ${fileName} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢)`;
    }
    
    if (pdfBuffer.byteLength > 50 * 1024 * 1024) { // 50MB limit for PDFs
      return `PDF ${fileName} ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (${Math.round(pdfBuffer.byteLength / 1024 / 1024)}MB) ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ`;
    }
    
    // Check if it's actually a PDF by checking magic bytes
    const pdfSignature = new Uint8Array(pdfBuffer.slice(0, 4));
    const isPdfFile = pdfSignature[0] === 0x25 && pdfSignature[1] === 0x50 && 
                      pdfSignature[2] === 0x44 && pdfSignature[3] === 0x46; // %PDF
    
    if (!isPdfFile) {
      console.warn('‚ö†Ô∏è File does not appear to be a valid PDF');
      return `‡πÑ‡∏ü‡∏•‡πå ${fileName} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà PDF ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)`;
    }
    
    // Save to temporary file for processing
    const tempFilePath = join(tmpdir(), `temp_${Date.now()}_${fileName.replace(/[^a-zA-Z0-9.-]/g, '_')}`);
    console.log('üíæ Saving to temp file:', tempFilePath);
    
    try {
      writeFileSync(tempFilePath, Buffer.from(pdfBuffer));
      console.log('‚úÖ Temp file created successfully');
    } catch (writeError: unknown) {
      const writeErrorMessage = writeError instanceof Error ? writeError.message : 'Unknown write error';
      console.error('‚ùå Failed to write temp file:', writeError);
      return `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF ${fileName} ‡πÑ‡∏î‡πâ: ${writeErrorMessage}`;
    }
    
    try {
      // Use pdf-text-extract for server-side PDF processing
      console.log('üîç Extracting text from PDF...');
      const pdfExtract = await import('pdf-text-extract');
      
      const extractedText = await new Promise<string>((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('PDF extraction timeout after 60 seconds'));
        }, 60000);
        
        pdfExtract.default(tempFilePath, (err: Error | null, pages: string[]) => {
          clearTimeout(timeout);
          
          if (err) {
            console.error('‚ùå PDF extraction error:', err);
            reject(err);
          } else {
            const fullText = pages.join('\n');
            console.log(`üìÑ Extracted ${fullText.length} characters from ${pages.length} pages`);
            console.log(`üî§ First 200 chars: ${fullText.substring(0, 200)}`);
            resolve(fullText);
          }
        });
      });
      
      // Clean up temp file
      try {
        unlinkSync(tempFilePath);
        console.log('üóëÔ∏è Temp file cleaned up');
      } catch (cleanupError) {
        console.error('‚ö†Ô∏è Failed to clean up temp file:', cleanupError);
      }
      
      console.log(`‚úÖ PDF extraction completed: ${extractedText.length} characters`);
      
      if (extractedText && extractedText.trim().length > 10) {
        // Check if the extracted text seems to contain meaningful content
        const meaningfulChars = extractedText.replace(/\s/g, '').length;
        const ratio = meaningfulChars / extractedText.length;
        
        if (ratio > 0.1) { // At least 10% non-whitespace characters
          return extractedText.trim();
        } else {
          console.log('‚ö†Ô∏è PDF appears to contain mostly whitespace');
          return `PDF ${fileName} - ‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (image-based PDF) ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ OCR`;
        }
      } else {
        // If no meaningful text extracted, provide specific message
        console.log('‚ö†Ô∏è No meaningful text found in PDF, might be image-based');
        return `PDF ${fileName} - ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ) ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ OCR`;
      }
    } catch (extractError: unknown) {
      // Clean up temp file in case of error
      try {
        unlinkSync(tempFilePath);
        console.log('üóëÔ∏è Temp file cleaned up after error');
      } catch (cleanupError) {
        console.error('‚ö†Ô∏è Error cleaning up temp file:', cleanupError);
      }
      
      console.error('‚ùå PDF text extraction failed:', extractError);
      
      const extractErrorMessage = extractError instanceof Error ? extractError.message : 'Unknown extraction error';
      
      // Provide specific error messages
      if (extractErrorMessage.includes('timeout')) {
        return `PDF ${fileName} - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)`;
      } else if (extractErrorMessage.includes('encrypted') || extractErrorMessage.includes('password')) {
        return `PDF ${fileName} - ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ`;
      } else if (extractErrorMessage.includes('corrupted') || extractErrorMessage.includes('invalid')) {
        return `PDF ${fileName} - ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
      } else {
        return `PDF ${fileName} - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${extractErrorMessage}`;
      }
    }
  } catch (error: unknown) {
    console.error('‚ùå Error extracting PDF text:', error);
    
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    const errorName = error instanceof Error ? error.name : 'Unknown';
    
    // Provide specific error messages based on error type
    if (errorName === 'AbortError') {
      return `PDF ${fileName} - ‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏Å‡∏¥‡∏ô 45 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)`;
    } else if (errorMessage.includes('fetch')) {
      return `PDF ${fileName} - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Supabase Storage ‡πÑ‡∏î‡πâ`;
    } else if (errorMessage.includes('network')) {
      return `PDF ${fileName} - ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢`;
    } else {
      return `PDF ${fileName} - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${errorMessage}`;
    }
  }
}

async function extractTextFromDocument(fileUrl: string, fileName: string): Promise<string> {
  try {
    console.log('Processing text document:', fileName);
    
    // Download document
    const response = await fetch(fileUrl);
    if (!response.ok) {
      throw new Error(`Failed to fetch document: ${response.statusText}`);
    }
    
    const text = await response.text();
    console.log(`Text document extracted ${text.length} characters from ${fileName}`);
    
    return text || `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ${fileName} - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤`;
  } catch (error) {
    console.error('Error processing text document:', error);
    return `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${fileName} - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ`;
  }
}

function analyzePDFFromFilename(fileName: string): string {
  const nameLower = fileName.toLowerCase();
  
  if (nameLower.includes('tk32') || nameLower.includes('tk-32')) {
    return `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏°‡∏µ‡∏†‡∏±‡∏ì‡∏ë‡πå TK-32 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó [‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó] ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ [‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ] ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô] ‡πÑ‡∏õ‡∏¢‡∏±‡∏á [‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á] ‡∏°‡∏µ‡∏ú‡∏•‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà [‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏] ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á]`;
  }
  
  if (nameLower.includes('tk11') || nameLower.includes('tk-11')) {
    return `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° TK-11 ‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤] ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó [‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å] ‡πÑ‡∏õ‡∏¢‡∏±‡∏á [‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á] ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô] ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà] ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á]`;
  }
  
  if (nameLower.includes('tk10') || nameLower.includes('tk-10')) {
    return `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ TK-10 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤] ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó [‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó] ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á [‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®/‡πÄ‡∏°‡∏∑‡∏≠‡∏á] ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô] ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà] ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà [‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏]`;
  }
  
  if (nameLower.includes('invoice')) {
    return `‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó [‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢] ‡∏ñ‡∏∂‡∏á [‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠] ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£] ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô] ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô [‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç] ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà]`;
  }
  
  if (nameLower.includes('packing')) {
    return `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏±‡∏á/‡∏ä‡∏¥‡πâ‡∏ô] ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏° [‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å] ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° ‡∏Ç‡∏ô‡∏≤‡∏î [‡∏Ç‡∏ô‡∏≤‡∏î] ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡∏±‡∏á [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á] ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏à‡∏∏ [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà]`;
  }
  
  if (nameLower.includes('company') || nameLower.includes('registration')) {
    return `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó [‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó] ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£ [‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à] ‡∏ó‡∏∏‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô] ‡∏ö‡∏≤‡∏ó ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà [‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà] ‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô] ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà]`;
  }
  
  if (nameLower.includes('msds') || nameLower.includes('safety')) {
    return `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ] ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç CAS [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç] ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ [‡∏£‡∏∞‡∏î‡∏±‡∏ö] ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö [‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£] ‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏ê‡∏°‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• [‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£] ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï [‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó]`;
  }
  
  if (nameLower.includes('import') && nameLower.includes('permit')) {
    return `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤] ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô] ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ [‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó] ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á [‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®] ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç] ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏• [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà] ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà [‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏]`;
  }
  
  if (nameLower.includes('po') || nameLower.includes('purchase') || nameLower.includes('order')) {
    return `‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ PO ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç PO] ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó [‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠] ‡∏ñ‡∏∂‡∏á [‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢] ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô] ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô] ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà] ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô [‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç]`;
  }
  
  return `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å/‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤: ${fileName} - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç`;
}

function extractKeyPoints(text: string): string[] {
  // Enhanced keyword extraction for export/import documents
  const keywords = [
    '‡πÉ‡∏ö‡∏Ç‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'invoice', 'packing list', 'certificate', 'permit',
    'TK', 'export', 'import', 'customs', 'shipment', 'container',
    '‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á', '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡πÉ‡∏ö‡πÅ‡∏û‡πá‡∏Ñ', '‡πÉ‡∏ö‡∏Ç‡∏ô',
    '‡πÄ‡∏Ñ‡∏°‡∏µ‡∏†‡∏±‡∏ì‡∏ë‡πå', '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢', '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°', '‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£',
    'MSDS', 'Safety Data Sheet', 'Commercial Invoice', 'Bill of Lading'
  ];
  
  const foundKeywords = keywords.filter(keyword => 
    text.toLowerCase().includes(keyword.toLowerCase())
  );
  
  return foundKeywords.slice(0, 5); // Return max 5 keywords
}

// Function to update document description in database
export async function updateDocumentDescription(documentId: string, analysisResult: DocumentAnalysisResult) {
  try {
    console.log('üìù updateDocumentDescription called');
    console.log('Document ID:', documentId);
    console.log('Analysis result:', analysisResult);

    const { updateDocumentSubmission } = await import('./db');
    
    console.log('üìÇ Calling updateDocumentSubmission...');
    const result = await updateDocumentSubmission(documentId, {
      description: analysisResult.description
    });
    
    console.log('üíæ Database update result:', result);
    console.log(`‚úÖ Updated description for document ${documentId}: ${analysisResult.description}`);
  } catch (error) {
    console.error('‚ùå Error updating document description:', error);
    throw error; // Re-throw to surface the error
  }
}

// Batch process existing documents
export async function processExistingDocuments() {
  try {
    const { getDocumentSubmissions } = await import('./db');
    
    const documents = await getDocumentSubmissions();
    const documentsWithoutDescription = documents.filter(doc => !doc.description);
    
    console.log(`Processing ${documentsWithoutDescription.length} documents without descriptions`);
    
    for (const doc of documentsWithoutDescription) {
      if (doc.file_url && doc.file_name) {
        const analysisResult = await analyzeDocument(
          doc.file_url,
          doc.file_name,
          doc.document_type
        );
        
        await updateDocumentDescription(doc.id, analysisResult);
        
        // Add delay to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    console.log('Finished processing existing documents');
  } catch (error) {
    console.error('Error processing existing documents:', error);
  }
} 